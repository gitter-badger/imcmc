####################################################################################################
#                       This is a template *ini file
#   note:
#   T = t = true = True
#   F = f = false = False
####################################################################################################

walker_num  = 200   # number of walkers in the ensemble.

burnin_step = 100   # how many times of iterations for burn in procession.

chain_num   = 1     # how many chains will be generated.  Note that in this version, all the chains are generated one after the other,
                    # so if the dimension of the problem is high, it is recommended to generate more chains, so that one can check then
                    # convergence by comparing the latest generated chains to those first generated chains.

chain_size  = 10000 # this is actually the number of iterations, so the true size of the sample is " chain_size * walker_num "

efficient_a = 2.0   # this factor controls the acceptance ratio, when the dimension of the problem is low, 2 is usually a good choice
                    # but when the dimension is high, it's better to set a smaller value, and MUST properly increase the chain_size,
                    # since the convergence rate is always becoming slow in high dimensional cases.

chain_root  = some_name # root of the names of the chains to be generated.

use_cosmomc_std_format = true   # if true, then the sampled chains will be in the same format as that for CosmoMC::GetDist, however,
                                # in this case, the weights in the first columns are all set to 1.
                                # if false, then the weights will be set to \exp(-0.5*\chisq)

#   set the ranges of your parameters
#   some_guessed_value:: this is actually used only for generating the first sampling position in parameter space;
#   lower_bound and upper_bound define the legal sampling range, if jump outside that range, then prior function will
#   return 0, other it will always return 1.

param1 = some_guessed_value1, lower_bound1, upper_bound1
param2 = some_guessed_value2, lower_bound2, upper_bound2

####################################################################################################
#   NOTE: names are case sensitive  !!!
#   the output order is exactly the same as you listed. If output_params is not set, then the output
#   order might be as good as you wish, the order is determined by C++ map<> internally ... so I
#   suggest you write down all the parameters of interests in the order you like.
####################################################################################################

output_params = param1 param2                   #   could be separated by space or comma

write_params_as_chain_header = false    # whether write the parameter names as the heads of the chains.  If you want to use GetDist.py
                                        # to process the chains, it's better to set this to FALSE, if not errors might happen when loading
                                        # chains. 

#   other settings you might wish to add, i.e., parameters to control data set usage
